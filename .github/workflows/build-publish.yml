name: Sample Python GitHub
on: push

permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read #Ability to read the contents permission
  security-events: write # Required for uploading code scanning 
jobs:
    build-publish-python:
        runs-on: ubuntu-latest
        env:
          PLATFORM_REPO: 'pypi-buildtests-local'
          RESOLVE_REPO: 'pypi-buildtests-remote'
          DOCKER_REPO: 'docker-pypibuildtests-local'
          IMAGE_NAME: 'python-test-image-gh'
        outputs:
          image: ${{ vars.JF_URL }}/${{ env.DOCKER_REPO}}/${{ env.IMAGE_NAME}}
          digest: ${{ steps.build.outputs.digest }}
        steps:
            # Download the JFrog CLI and configure using JFrog Project and OIDC provider 
            - uses: jfrog/setup-jfrog-cli@v4
              name: Setup JFrog CLI
              id: setup-cli
              env:
                #JF_URL value is the JPD subdomain. It must exclude protocol (e.g. my-instance-name.jfrog.io)
                JF_URL: https://${{ vars.JF_URL }}/
                JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
                # Docker section start
                #   JF_USER is used for basic authentication to docker repositories
                JF_USER: ${{ vars.JF_USER }}
                # Docker section end

              with:
                version: latest
                  
            - name: Checkout the repository    
              uses: actions/checkout@v4
           
            - name: configure jfrog environment
              run: |
                jf pip-config --repo-resolve=${{ env.RESOLVE_REPO }}
                
            - name: configure environment
              run: |                      
                python3 -m pip install --upgrade pip setuptools wheel sigstore
                wheel -h
                pip show setuptools
                echo $VIRTUAL_ENV
                
            - name: build project
              run: |                      
                jf pip install -r requirements.txt  --module=jfrog-python-example
                python setup.py sdist bdist_wheel
                cd dist && echo "hashes=$(sha256sum * | base64 -w0)" >> $GITHUB_OUTPUT

            - name: publish python package
              run: |
                jf rt u dist/ ${{ env.PLATFORM_REPO }}/example-projects/ --module=jfrog-python-example
                
